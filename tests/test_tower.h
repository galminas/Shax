#ifndef TEST_TOWER_H
#define TEST_TOWER_H
#include <gtest/gtest.h>

extern "C" {
#include "func.h"
}
TEST(moveTower,t1){
    int board[8][8] = {{-4, -1, -2, -5, -3, -2, -1, -4},
                       {-6, -6, -6, -6, -6, -6, -6, -6},
                       { 0,  0,  0,  0,  0,  0,  0,  0},
                       { 0,  0,  0,  0,  0,  0,  0,  0},
                       { 0,  0,  0,  0,  0,  0,  0,  0},
                       { 0,  0,  0,  0,  0,  0,  0,  0},
                       { 6,  6,  6,  6,  6,  6,  6,  6},
                       { 4,  1,  2,  5,  3,  2,  1,  4}};
    ASSERT_EQ(moveTower(0,0,0,1,board),0);
}
TEST(moveTower,t2){
    int board[8][8] = {{0, -1, -2, -5, -3, -2, -1, -4},
                       {-6, -6, -6, -6, -6, -6, -6, -6},
                       { -4,  0,  0,  0,  0,  0,  0,  0},
                       { 0,  0,  0,  0,  0,  0,  0,  0},
                       { 0,  0,  0,  0,  0,  0,  0,  0},
                       { 0,  0,  0,  0,  0,  0,  0,  0},
                       { 6,  6,  6,  6,  6,  6,  6,  6},
                       { 4,  1,  2,  5,  3,  2,  1,  4}};
    ASSERT_EQ(moveTower(0,2,0,5,board),1);
}
TEST(moveTower,t3){
    int board[8][8] = {{0, -1, -2, -5, -3, -2, -1, -4},
                       {-6, -6, -6, -6, -6, -6, -6, -6},
                       { -4,  0,  0,  0,  0,  0,  0,  0},
                       { 0,  0,  0,  0,  0,  0,  0,  0},
                       { 0,  0,  0,  0,  0,  0,  0,  0},
                       { 0,  0,  0,  0,  0,  0,  0,  0},
                       { 6,  6,  6,  6,  6,  6,  6,  6},
                       { 4,  1,  2,  5,  3,  2,  1,  4}};
    ASSERT_EQ(moveTower(0,2,4,2,board),1);
}
TEST(moveTower,t4){
    int board[8][8] = {{0, -1, -2, -5, -3, -2, -1, -4},
                       {-6, -6, -6, -6, -6, -6, -6, -6},
                       { -4,  0,  0,  0,  0,  0,  0,  0},
                       { 0,  0,  0,  0,  0,  0,  0,  0},
                       { 0,  0,  0,  0,  0,  0,  0,  0},
                       { 0,  0,  0,  0,  0,  0,  0,  0},
                       { 6,  6,  6,  6,  6,  6,  6,  6},
                       { 4,  1,  2,  5,  3,  2,  1,  4}};
    ASSERT_EQ(moveTower(0,2,1,3,board),0);
}
TEST(moveTower,t5){
    int board[8][8] = {{0, -1, -2, -5, -3, -2, -1, -4},
                       {-6, -6, -6, -6, -6, -6, -6, -6},
                       { -4,  0,  0,  0,  0,  0,  0,  0},
                       { 0,  0,  0,  0,  0,  0,  0,  0},
                       { 0,  0,  0,  0,  0,  0,  0,  0},
                       { 0,  0,  0,  0,  0,  0,  0,  0},
                       { 6,  6,  6,  6,  6,  6,  6,  6},
                       { 4,  1,  2,  5,  3,  2,  1,  4}};
    ASSERT_EQ(moveTower(0,2,3,3,board),0);
}
TEST(moveTower,t6){
    int board[8][8] = {{0, -1, -2, -5, -3, -2, -1, -4},
                       {-6, -6, -6, -6, -6, -6, -6, -6},
                       { -4,  0,  0,  0,  0,  0,  0,  0},
                       { 0,  0,  0,  0,  0,  0,  0,  0},
                       { 0,  0,  0,  0,  0,  0,  0,  0},
                       { 0,  0,  0,  0,  0,  0,  0,  0},
                       { 6,  6,  6,  6,  6,  6,  6,  6},
                       { 4,  1,  2,  5,  3,  2,  1,  4}};
    ASSERT_EQ(moveTower(0,2,0,3,board),1);
}
TEST(moveTower,t7){
    int board[8][8] = {{0, -1, -2, -5, -3, -2, -1, -4},
                       {-6, -6, -6, -6, -6, -6, -6, -6},
                       { -4,  0,  0,  0,  0,  0,  0,  0},
                       { 0,  0,  0,  0,  0,  0,  0,  0},
                       { 0,  0,  0,  0,  0,  0,  0,  0},
                       { 0,  0,  0,  0,  0,  0,  0,  0},
                       { 6,  6,  6,  6,  6,  6,  6,  6},
                       { 4,  1,  2,  5,  3,  2,  1,  4}};
    ASSERT_EQ(moveTower(0,2,3,2,board),1);
}

#endif // TEST_TOWER_H
