#ifndef TEST_MOVE_H
#define TEST_MOVE_H
#include <gtest/gtest.h>

extern "C" {
#include "func.h"
}
TEST(move,t1){
    int board[8][8] = {{-4, -1, -2, -5, -3, -2, -1, -4},
                           {-6, -6, -6, -6, -6, -6, -6, -6},
                           { 0,  0,  0,  0,  0,  0,  0,  0},
                           { 0,  0,  0,  0,  0,  0,  0,  0},
                           { 0,  0,  0,  0,  0,  0,  0,  0},
                           { 0,  0,  0,  0,  0,  0,  0,  0},
                           { 6,  6,  6,  6,  6,  6,  6,  6},
                           { 4,  1,  2,  5,  3,  2,  1,  4}};
        move(0,0,2,0,board);
        ASSERT_EQ(board[0][0],0);
        ASSERT_EQ(board[2][0],-4);
}TEST(move,t2){
    int board[8][8] = {{-4, -1, -2, -5, -3, -2, -1, -4},
                           {-6, -6, -6, -6, -6, -6, -6, -6},
                           { 0,  0,  0,  0,  0,  0,  0,  0},
                           { 0,  0,  0,  0,  0,  0,  0,  0},
                           { 0,  0,  0,  0,  0,  0,  0,  0},
                           { 0,  0,  0,  0,  0,  0,  0,  0},
                           { 6,  6,  6,  6,  6,  6,  6,  6},
                           { 4,  1,  2,  5,  3,  2,  1,  4}};
    ASSERT_EQ(board[6][1],6);
    ASSERT_EQ(board[5][1],0);
    move(6,1,5,1,board);
        ASSERT_EQ(board[6][1],0);
        ASSERT_EQ(board[5][1],6);
}
TEST(move,t3){
    int board[8][8] = {{-4, -1, -2, -5, -3, -2, -1, -4},
                           {-6, -6, -6, -6, -6, -6, -6, -6},
                           { 0,  0,  0,  0,  0,  0,  0,  0},
                           { 0,  0,  0,  0,  0,  0,  0,  0},
                           { 0,  0,  0,  0,  0,  0,  0,  0},
                           { 0,  0,  0,  0,  0,  0,  0,  0},
                           { 6,  6,  6,  6,  6,  6,  6,  6},
                           { 4,  1,  2,  5,  3,  2,  1,  4}};
        move(7,6,5,7,board);
        ASSERT_EQ(board[7][6],0);
        ASSERT_EQ(board[5][7],1);
}


#endif // TEST_MOVE_H
